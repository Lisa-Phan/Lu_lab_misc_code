#!/bin/bash
#SBATCH -p normal
#SBATCH -J FA-Cluster
#SBATCH -D /home1/08332/mona163/src
#SBATCH -n 1
#SBATCH -N 1
#SBATCH -t 48:00:00

echo Step 0: Define variables, tools, primer_sequences and paths at echo `date`.

## Home Directory
project_dir=/scratch/08332/mona163/TH_SELEX
## Input Directory for sequences to be processed
input_dir=$project_dir/Combined_TH
## Directory for sequences that have been cut
input_ext=_L001.fastq
## Directory where the perl script files of FASTAptamer are stored
fastapt_dir=/work2/08332/mona163/stampede2/FASTAptamer


## Module defined for Perl to run FASTAptamer Perl scripts
## Note: If you need a specific version of Perl, run "module avail Perl" to search for available versions
perl_mod=biocontainers

## -------------Script Options-----------------
## Specify if you want to perform the program "count", "clust", or "both".
program=both

## FASTAptamer Clust Parameters:
## Number of insertions, deletions, or substitutions to allow for a sequence to join an existing cluster.
distance=7
## Cut-off filter by lines of ranking. Makesure it's odd number so that the filter will be a number instead of a sequence. Sequences less abundant than this filter will be discarded. 0 means there is no filter. Unless you have a very small pool, it is highly recommended to set a filter or the clust program will takes days or weeks to complete.
filter_condition=8001
## Set the maximum number of clusters to be generated by the program before it stops. If left blank or set to 0, will default to the maximum (9999999999999999).
max_clusters=

## ----------Sanity Check & Processing--------------
## Check to make sure that the filter_condition is set correctly as an odd number, otherwise everything would go wrong!

if [ $(($filter_condition%2)) -eq 0 ];
then
  echo -e "Error\: The \'filter_condition\' variable must be an odd number to perform the autocalculation of filter number. Currently, \'filter_condition\' is $filter_condition."
  exit 2
fi

echo Starting FASTAptamer $program at `date`.
##---------------------------------------------------------------------
echo -e "\nPrep Step: Define paths, tools, and variables at `date`. \n"

## Generates date in YYYYMMDD format. Useful to generate file and folder names.
day=$( date +%Y%m%d )
## Input directory for results of FASTAptamer
output_dir=$project_dir/Counster
count_dir=$output_dir/count              ## Directory for count files
clust_dir=$output_dir/clust-$filter_condition            ## Directory for clust files

## Used as output extension for count and input extension for clust
count_ext=.count.fa
clust_ext=.clust.fa


## Note: This script creates $count_dir and $clust_dir only when running the "count" or "clust" programs, so it does not use all_dir to create them both at the beginning. If you want to use all_dir, uncomment the below.
all_dir=($output_dir $count_dir $clust_dir)

## ----------Sanity Check & Processing--------------
## Check to make sure that the program is set correctly as "count" or "clust" or "both", otherwise everything would go wrong!
if [ "$program" != "count" ] && [ "$program" != "clust" ] && [ "$program" != "both" ];
then
  echo -e "Error\: The \'program\' variable must be either \'count\', \'clust\', or \'both\' to perform both programs on the specified files. Currently, \'program\' is $program."
  exit 2
fi

## Only runs if $all_dir is uncommented above and has something added to it. Otherwise, will create $count_dir and $clust_dir separately later in the script when the "count" or "clust" programs are run.
if [ ! -z $all_dir ]; then
  for d in ${all_dir[@]}; do  ## Loops through all directories listed in array $all_dir
  ## If the directory doesn't exist, creates the directory (and all parent directories).
    if [ ! -d $d ]; then
      mkdir -p $d
      echo Creating directory $d and any parent directories at `date`.
    fi
  done
fi

## Loads Perl, required for the FASTAptamer scripts written in Perl
module load $perl_mod

##-----------------------------------------------------------
echo STEP2: define input files.

## If $file_list is uncommented above and set to a value, updates the file_list file which the script uses to get the list of filenames to process

if [ ! -z "$input_dir/file_list" ]; then
   	 ls $input_dir/*$input_ext > $input_dir/file_list  ## Updates the file_list file
   	 echo Created an updated file_list in $input_dir at `date`.
    else
    sleep 0.1                                          ## Sleep for 0.1 second if not the first task
fi


COUNTER=1

echo `wc -l < $input_dir/file_list`
line_count=`wc -l < $input_dir/file_list`
echo Line_number $line_count
max_file_number=$line_count
echo max sample number $max_file_number

while [ $COUNTER -le $max_file_number ]
do
echo sample $COUNTER

	A=`echo "$COUNTER"p`

	echo extracting from line number $A
	R=`sed -n "$A" $input_dir/file_list`   ## Gets the filename from the $file_list file corresponding to the current $task_id

	echo Grabbing filenames from the external file $file_list at `date`.

input_file=`basename $R $input_ext`          ## Removes the directory from the filename to get the basename
sample_name=${input_file%%$input_ext}        ## Remove the input_ext from the filename

## Output of variables to help with troubleshooting
echo -e "Variable R is $R"
echo -e "Variable sample_name is $sample_name."
echo -e "Variable input_file is $input_file."

## -----------FASTAptamer Count---------------

## Runs the FASTAptamer count script here if "count" or "both" is set as the "program" 
if [ "$program" = "count" ] || [ "$program" = "both" ]; then
  echo -e "\nStep 1: FASTAptamer Count of $sample_name at `date`."
  
  ## Creates the count directory if it doesn't exist.
  if [ ! -d $count_dir ]; then
    mkdir -p $count_dir
    echo Creating directory $count_dir and any parent directories at `date`.
  fi

  ## FASTAptamer count command. Will automatically reorder sequences from highest to lowest abundance and rename sequences as "Rank-Reads-RPM".
  perl $fastapt_dir/fastaptamer_count -i $R -o $count_dir/$sample_name$count_ext

  if [ ! -z "$file_list" ]; then                        ## Runs if $file_list is uncommented and not defined.
    ls $count_dir/*$count_ext > $count_dir/$file_list   ## Creates the count file_list.
    echo Created $file_list in $count_dir at `date`.
  fi
  
  echo  -e "\nFinished FASTAptamer Count of $sample_name in $count_dir at `date`.\n"
fi

## -----------Autocalculation for filter---------------

  echo -e "\nStep 1: Autocalculating filter number for FASTAptamer_clust of $sample_name at `date`."
  
  ## Autocalculate Filter command. Will automatically reorder number of sequences from highest to lowest abundance and output the cutoff number.
  filt_line=`sed -n "${filter_condition}p" $count_dir/$sample_name$count_ext`   ## retrive the number of reads you want to process.
  filter_number=`basename $filt_line`
  filter=`grep -oP '(?<=-).*?(?=-)' <<< "$filter_number"`          ## get the filter number based on how many times the top reads appears in a file.
   
  echo -e "Variable filt_line is $filt_line."
 
  echo The filter value is $filter for $sample_name.

  if [ ! -z "$file_list" ]; then                        ## Runs if $file_list is uncommented and not defined.
    ls $filt_dir/*$filt_ext > $filt_dir/$file_list   ## Creates the filter file_list.
    echo Created $file_list in $filt_dir at `date`.
  fi
  
  echo  -e "\nFinished autocalculating the filter value for $sample_name in $filt_dir at `date`.\n"


## ---------FASTAptamer Cluster--------------
## Runs the FASTAptamer clust script here if "clust" or "both" is set as the "program" 
if [ "$program" = "clust" ] || [ "$program" = "both" ];
then
  echo -e "\nStep 2: FASTAptamer Cluster of $sample_name at `date`.\n"
  
  echo The clust distance is $distance and the clust sequence filter is $filter.
  echo Note: The read filter is for the absolute number of sequences in the file, NOT the relative reads per million \(RPM\) of the sequences!
  if [[ ! -z "$max_clusters" ]] && [[ ! "$max_clusters" = "0" ]]; then
    echo The clust maximum number of clusters is $max_clusters.
  else
    max_clusters=9999999999999999
    echo The clust maximum number of clusters is set to the maximum value.
  fi
  
  ## Creates the clust directory if it doesn't exist.
  if [ ! -d $clust_dir ]; then
    mkdir -p $clust_dir
    echo Creating directory $clust_dir and any parent directories at `date`.
  fi
  
  ## FASTAptamer clust command with the specified $distance and $filter.
  perl $fastapt_dir/fastaptamer_cluster -i $count_dir/$sample_name$count_ext -o $clust_dir/$sample_name-$filter$clust_ext -d $distance -f $filter -c $max_clusters

  if [ ! -z "$file_list" ]; then                       ## Runs if $file_list is uncommented and not defined.
    ls $clust_dir/*$clust_ext > $clust_dir/$file_list  ## Creates the clust file_array.
    echo Created $file_list in $clust_dir at `date`.
  fi
  
  echo  -e "\nFinished FASTAptamer Cluster of $sample_name in $clust_dir at `date`.\n"
fi

echo Finished processing $sample_name at `date`.

printf "The value of COUNTER=%d\n" $COUNTER
let COUNTER=COUNTER+1
printf "The new value of COUNTER=%d\n" $COUNTER

done

echo Finished processing at `date`.

module purge
