#!/bin/python

"""
Write script to generate initial starting and ending coordinates for superimposable structures

Input: superimposed c-alpha, generated by foldseek format mode 5
Input 2: query file
Input 3: list of searched files
"""

import argparse
import os
from Bio.PDB import NeighborSearch, PDBParser
import numpy as np

def get_distance(atom, coordinate):
    """
    param res1: pdb.structure.atoms.atoms object
    param coordinate: numpy array of (X,Y,Z) coordinates
    return: Euclidean distance between the atom and the coordinate
    """
    return np.linalg.norm(atom.coord - coordinate)
    

def atom_select(pdb_object, coordinate, search_radius):
    """
    Find the atom closest to the specified coordinate in given pdb object
    param: pdb_object is the C-a backbone of a pdb file, 
           generated by Foldseek easy-search format-mode 5
    param: coordinate is a tuple of (X,Y,Z) coordinates

    return: the closest atom to the coordinate
    """
    all_atoms = list(pdb_object.get_atoms())
    ns = NeighborSearch(all_atoms)
    closest_atm = ns.search(coordinate, radius = search_radius, level = 'A')
    closest_atm.sort(key = lambda x: get_distance(x, coordinate))
    assert len(closest_atm) > 0, f"No residues found within {search_radius} of the coordinate"
    return closest_atm[0]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--DIR', type=str, help='directory of superimposed c-alpha files')
    parser.add_argument('-q', '--QUERY', type=str, help='query file, the file that initial coordinates are based on')
    parser.add_argument('-i', '--INIT', type=str, help='starting x,y,z coordinate')
    parser.add_argument('-e', '--END', type=str, help='ending x,y,z coordinate')
    parser.add_argument('-o', '--OUTPUT', type=str, help='output file name')

    args = parser.parse_args()
    pdb_files = os.listdir(args.DIR)

    assert args.QUERY in pdb_files, f"{args.QUERY} not found in {args.DIR}"

    init_coord = np.array([float(value) for value in args.INIT.split(',')])
    end_coord = np.array([float(value) for value in args.END.split(',')])
    #get full path names
    pdb_files = [os.path.join(args.DIR, pdb_file) for pdb_file in pdb_files if pdb_file != args.QUERY]

    #iterate over pdb objects and generate matching coordinates
    
    with open(args.OUTPUT, 'w') as outfile:
        outfile.write('mapped_to_file start_residue start_coord end_residue end_coord\n')
        for pdb_file in pdb_files:
            pdb_object = PDBParser().get_structure('x', pdb_file)
            init_atom = atom_select(pdb_object, init_coord, 5)
            end_atom = atom_select(pdb_object, end_coord, 5)
            outfile.write(f'{pdb_file} {init_atom.get_parent().id[0]}_{init_atom.get_parent().id[1]} ' + 
                          f'{init_atom.coord} {end_atom.get_parent().id[0]}_{end_atom.get_parent().id[1]} {end_atom.coord}\n')
        outfile.close()